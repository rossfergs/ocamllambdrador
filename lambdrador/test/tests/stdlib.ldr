
let not b = if b then false else true

let mod a b = a - (b * (int (a/b)))

let rev l =
  let aux acc list =
    match list with
      case [] then acc
      case x :: xs then
        aux (x :: acc) xs;
  aux [] l

let concat l1 l2 =
  let aux acc l =
    match l with
      case [] then rev acc
      case x :: xs then
        aux (x :: acc) xs;
  aux (rev l1) l2

let flatten_tree tree =
  match tree with
    case `Branch [l; r] then
      let ll = flatten_tree l;
      let rl = flatten_tree r;
      concat ll rl
    case `Leaf n then [n]

let filter func list =
  let aux acc l =
    match l with
      case [] then rev acc
      case x :: xs when func x = true then
        aux (x :: acc) xs
      case _ :: xs then
        aux acc xs;
  aux [] list

let map func list =
  let aux acc l =
    match l with
      case [] then rev acc
      case x :: xs then aux ((func x) :: acc) xs;
  aux [] list

let foldl func init list =
  let aux acc l =
    match l with
      case [] then acc
      case x :: xs then aux (func acc x) xs;
  aux init list

let foldr func init list =
  let aux acc l =
    match l with
      case [] then acc
      case x :: xs then aux (func x acc) xs;
  aux init list

let nth list n =
  let aux counter l =
    match l with
      case x :: [] then x
      case x :: _ when counter <= 0 then x
      case x :: xs then aux (counter-1) xs
      case [] then print "empty list"; [];
  aux n list

let mem list val =
  match list with
    case [] then false
    case x :: _ when x = val then true
    case _ :: xs then mem xs val

let head list =
  match list with
    case x :: _ then
      x
    case [] then
      []

let tail list =
  match list with
    case _ :: xs then
      xs
    case [] then
      []

let church n f v = 
  match n with
    case _ when n > 0 then
      church (n-1) f (f v)
    case _ then v

@
let flatten list = 
  let aux acc l = 
    match l with
      case (x :: xs) :: r then
        print (x :: xs);
        [];
  aux [] list
@

let slice list start_idx end_idx =
  let aux acc counter =
    if counter = (end_idx + 1) then rev acc
    else aux ((nth list counter) :: acc) (counter+1);
  aux [] start_idx

let flatten list = 
  let aux acc l =
    match l with
      case [] then rev acc
      case (x :: xs) :: rem then
        let new_acc = aux (x :: acc) xs;
        aux new_acc rem
      case x :: xs then aux (x :: acc) xs;
  aux [] list

let zip left right =
  let aux acc l r =
    match [l; r] with
      case [[]; _] then
        rev acc
      case [_; []] then
        rev acc
      case [x :: xs; y :: ys] then
        aux ([x; y] :: acc) xs ys;
  aux [] left right

let range n = 
  let aux acc c =
    if c = n then rev acc
    else aux (c :: acc) (c+1);
  aux [] 0

let length list = 
  let aux l c =
    match l with
      case [] then c
      case _ :: xs then aux xs (c+1);
  aux list 0

let enumerate list = 
  zip (range (length list)) list

let dedup list = 
  let aux acc l =
    match l with
      case [] then rev acc
      case v :: vs when not (mem acc v) then aux (v :: acc) vs
      case _ :: vs then aux acc vs;
  aux [] list

let alter list idx value =
  let aux acc l =
    match l with
      case [] then rev acc
      case [i; _] :: rem when i = idx then
        aux (value :: acc) rem
      case [_; v] :: rem then aux (v :: acc) rem;
  aux [] (enumerate list)

let alter_2d list x y value = 
  let aux acc l =
    match l with
      case [] then rev acc
      case [i; inner_list] :: rem when i = x then
        let altered = (alter inner_list y value);
        aux (altered :: acc) rem
      case [i; inner_list] :: rem then aux (inner_list :: acc) rem;
  let el = (enumerate list);
  aux [] el

let all list =
  let aux l =
    match l with
      case false :: _ then false
      case true :: bs then aux bs
      case [] then true
      case _ then println "non-bool value in all"; false;
  aux list

let any list =
  let aux l =
    match l with
      case false :: bs then aux bs
      case true :: _ then true
      case [] then false
      case thing then println "non-bool list value in any"; false;
  aux list
