
reversing a list of [1; 2; 3]: [3; 2; 1]
functional: true

concatenating [1; 2; 3] and [4; 5; 6]: [1; 2; 3; 4; 5; 6]
functional: true

flattening a tree of `Branch [ `Branch [ `Leaf 1; `Leaf 2]; `Leaf 3]: [1; 2; 3]
functional: true

filtering [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] to have only numbers under 5: [1; 2; 3; 4]
functional: true

mapping [1; 2; 3] to multiply each value by 10: [10; 20; 30]
functional: true

mapping [1; 2; 3] to add one to each value (using anonymous function): [2; 3; 4]
functional: true

folding left, subtracting a list of [1;2;3] together: -6
functional: true

folding right, subtracting a list of [1; 2; 3] together: 2
functional: true

getting the 3rd index of [0;1;2;3;4;5] (expected = 3): 3
functional: 
true

head of [1;2;3]: 1
functional: true

tail of [1;2;3]: [2; 3]
functional: true

function modelling church numeral style encoding, appling successor function to 0 5 times: 5
functional: true

mem function, to check if a variable is in a list: true
functional: true

testing closures: 
 > double function: 20, true
 > triple function: 30, true

modulo function:
  check if 2 is even
  true
  check if 3 is not even
  true
  check if 10 is even
  true
all functional?: true
